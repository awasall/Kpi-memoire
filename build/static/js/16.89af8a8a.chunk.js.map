{"version":3,"sources":["App/components/MainCard.js","App/components/UcFirst.js","ComponentLib/UIElements/Basic/Button.js"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","children","Component","windowSize","UcFirst","string","text","charAt","toUpperCase","slice","React","BasicButton","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","key","overlay","outlineButtons","squareButtons","basicDropdownButton","button","eventKey","splitDropdownButton","Divider"],"mappings":"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","file":"static/js/16.89af8a8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Card, Collapse } from 'react-bootstrap';\nimport windowSize from 'react-window-size';\n\nimport Aux from \"../../hoc/_Aux\";\nimport DEMO from \"../../constants/constant\";\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nclass MainCard extends Component {\n    state = {\n        isOption: this.props.isOption,\n        fullCard: false,\n        collapseCard: false,\n        loadCard: false,\n        cardRemove: false\n    };\n\n    cardReloadHandler = () => {\n        this.setState({ loadCard: true });\n        setInterval(() => {\n            this.setState({ loadCard: false });\n        }, 3000);\n    };\n\n    cardRemoveHandler = () => {\n        this.setState({ cardRemove: true });\n    };\n\n    //MY FUNCION\n    // componentDidUpdate(prevProps) {\n    //     if (this.props.collapseCard !== prevProps.collapseCard) {\n    //         this.setState({ collapseCard: this.props.collapseCard })\n    //     }\n\n    // }\n\n    render() {\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\n        let card = '';\n        let cardClass = [];\n\n        if (this.state.isOption) {\n            cardHeaderRight = (\n                <div className=\"card-header-right\">\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\n                            <i className=\"feather icon-more-horizontal\" />\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => { this.setState(prevState => { return { fullCard: !prevState.fullCard } }) }}>\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'} />\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restorer' : 'Agrandir'} </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => { this.setState(prevState => { return { collapseCard: !prevState.collapseCard } }) }}>\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'} />\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Etendre' : 'RÃ©duire'} </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\n                                <i className='feather icon-refresh-cw' />\n                                <a href={DEMO.BLANK_LINK}> Rafraichir </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\n                                <i className='feather icon-trash' />\n                                <a href={DEMO.BLANK_LINK}> Supprimer </a>\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            );\n        }\n\n        cardHeader = (\n            <Card.Header>\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\n                {cardHeaderRight}\n            </Card.Header>\n        );\n\n        if (this.state.fullCard) {\n            cardClass = [...cardClass, 'full-card'];\n            fullScreenStyle = { position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight };\n        }\n\n        if (this.state.loadCard) {\n            cardClass = [...cardClass, 'card-load'];\n            loader = (\n                <div className=\"card-loader\">\n                    <i className=\"pct-loader1 anim-rotate\" />\n                </div>\n            );\n        }\n\n        if (this.state.cardRemove) {\n            cardClass = [...cardClass, 'd-none'];\n        }\n\n        if (this.props.cardClass) {\n            cardClass = [...cardClass, this.props.cardClass];\n        }\n\n        card = (\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\n                {cardHeader}\n                <Collapse in={!this.state.collapseCard}>\n                    <PerfectScrollbar>\n                        <Card.Body>\n                            {this.props.children}\n                        </Card.Body>\n                    </PerfectScrollbar>\n                </Collapse>\n                {loader}\n            </Card>\n        );\n\n        return (\n            <Aux>\n                {card}\n            </Aux>\n        );\n    }\n}\n\nexport default windowSize(MainCard);\n","import React from 'react';\n\nclass UcFirst extends React.Component {\n    render() {\n        const string = this.props.text;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n}\n\nexport default UcFirst;","import React from 'react';\nimport {\n    Row,\n    Col,\n    Button,\n    OverlayTrigger,\n    Tooltip,\n    ButtonToolbar,\n    Dropdown,\n    DropdownButton,\n    SplitButton\n} from 'react-bootstrap';\n\nimport Aux from \"../../../hoc/_Aux\";\nimport Card from \"../../../App/components/MainCard\";\nimport UcFirst from \"../../../App/components/UcFirst\";\n\nclass BasicButton extends React.Component {\n    render() {\n        const buttonVariants = [\n            'primary',\n            'secondary',\n            'success',\n            'danger',\n            'warning',\n            'info',\n            'light',\n            'dark',\n        ];\n\n        const buttonOptions = [\n            {variant: 'primary', icon:'feather icon-thumbs-up'},\n            {variant: 'secondary', icon:'feather icon-camera'},\n            {variant: 'success', icon:'feather icon-check-circle'},\n            {variant: 'danger', icon:'feather icon-slash'},\n            {variant: 'warning', icon:'feather icon-alert-triangle'},\n            {variant: 'info', icon:'feather icon-info'}\n        ];\n\n        const basicButtons = buttonVariants.map((variant, idx) => (\n            <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\n                <Button variant={variant}><UcFirst text={variant} /></Button>\n            </OverlayTrigger>\n        ));\n\n        const outlineButtons = buttonVariants.map((variant, idx) => (\n            <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-'+variant}</Tooltip>}>\n                <Button variant={'outline-'+variant}><UcFirst text={variant} /></Button>\n            </OverlayTrigger>\n        ));\n\n        const squareButtons = buttonVariants.map((variant, idx) => <Button key={idx} className='btn-square' variant={variant}><UcFirst text={variant} /></Button>);\n\n\n        const basicDropdownButton = buttonOptions.map(\n            button => {\n                const title = <UcFirst text={button.variant} />;\n                return (\n                <DropdownButton\n                    title={title}\n                    variant={button.variant}\n                    id={`dropdown-variants-${button.variant}`}\n                    key={button.variant}\n                >\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\n                </DropdownButton>\n            );\n        });\n\n        const splitDropdownButton = buttonOptions.map(\n            button => {\n                const title = <UcFirst text={button.variant} />;\n                return (\n                <SplitButton\n                    title={title}\n                    variant={button.variant}\n                    id={`dropdown-split-variants-${button.variant}`}\n                    key={button.variant}\n                    className=\"mr-2 mb-2\"\n                >\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\n                    <Dropdown.Divider />\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                </SplitButton>\n            );\n        });\n\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        <Card title=\"Default\">\n                            <p>use <code>variant=\"*\"</code> props in component <code>Button</code> to get various button</p>\n                            {basicButtons}\n                            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\n                                <Button variant=\"link\">Link</Button>\n                            </OverlayTrigger>\n                        </Card>\n                        <Card title=\"Outline\">\n                            <p>use <code>variant=\"outline-*\"</code> props in component <code>Button</code> to get various outline button</p>\n                            {outlineButtons}\n                        </Card>\n                        <Card title=\"Square Button\">\n                            <p>use <code>className=\"btn-square\"</code> props in component <code>Button</code> to get square button</p>\n                            {squareButtons}\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card title=\"Basic Dropdown Button\">\n                            <ButtonToolbar>\n                                {basicDropdownButton}\n                            </ButtonToolbar>\n                        </Card>\n                        <Card title=\"Split Dropdown Button\">\n                            <ButtonToolbar>\n                                {splitDropdownButton}\n                            </ButtonToolbar>\n                        </Card>\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    }\n}\n\nexport default BasicButton;\n"],"sourceRoot":""}