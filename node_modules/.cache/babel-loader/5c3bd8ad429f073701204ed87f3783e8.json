{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\src\\\\App\\\\components\\\\ExportExcel.js\";\nimport React from 'react';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { Button } from 'react-bootstrap';\nimport columns from './SprintData';\nexport var ExportExcel = function ExportExcel(_ref) {\n  var csvData = _ref.csvData,\n      fileName = _ref.fileName,\n      propColumns = _ref.propColumns;\n  var fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  var fileExtension = '.xlsx';\n  if (propColumns) columns = propColumns;\n  csvData = formatJson(csvData);\n\n  var exportToCSV = function exportToCSV(csvData, fileName) {\n    var ws = XLSX.utils.json_to_sheet(csvData);\n    console.log('ws', ws);\n    var wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    var excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    var data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return React.createElement(Button, {\n    variant: \"success\",\n    onClick: function onClick(e) {\n      return exportToCSV(csvData, fileName);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"feather icon-external-link  mx-0 \",\n    style: {\n      fontSize: \"25px \"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), \" \", React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Excel\"));\n}; ///convert data/////\n\nvar convertDate = function convertDate(mydata) {\n  return moment(mydata).format(\"DD/MM/YYYY\");\n}; // Conversion of raw json data to excel kpi file like data format\n\n\nvar formatJson = function formatJson(csvData) {\n  return csvData.map(function (sprint) {\n    var data = {};\n    if (sprint.projectName) data['Plateau'] = sprint.projectName;\n    data[''];\n    columns.forEach(function (_ref2) {\n      var title = _ref2.title,\n          dataIndex = _ref2.dataIndex;\n      data[title] = sprint[dataIndex];\n    });\n    return data;\n  });\n}; // {\n//     title: 'Plateau',\n//     dataIndex: 'projectName',\n// },","map":{"version":3,"sources":["C:\\Users\\a851272\\OneDrive - Atos\\Bureau\\KPI-Jira-Front-End-master\\src\\App\\components\\ExportExcel.js"],"names":["React","FileSaver","XLSX","Button","columns","ExportExcel","csvData","fileName","propColumns","fileType","fileExtension","formatJson","exportToCSV","ws","utils","json_to_sheet","console","log","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","data","Blob","saveAs","e","fontSize","convertDate","mydata","moment","format","map","sprint","projectName","forEach","title","dataIndex"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAwC;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AAC/D,MAAMC,QAAQ,GAAG,iFAAjB;AACA,MAAMC,aAAa,GAAG,OAAtB;AAEA,MAAIF,WAAJ,EACIJ,OAAO,GAAGI,WAAV;AAEJF,EAAAA,OAAO,GAAGK,UAAU,CAACL,OAAD,CAApB;;AACA,MAAMM,WAAW,GAAG,SAAdA,WAAc,CAACN,OAAD,EAAUC,QAAV,EAAuB;AACvC,QAAMM,EAAE,GAAGX,IAAI,CAACY,KAAL,CAAWC,aAAX,CAAyBT,OAAzB,CAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBJ,EAAlB;AACA,QAAMK,EAAE,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAE,gBAAQN;AAAV,OAAV;AAA0BO,MAAAA,UAAU,EAAE,CAAC,MAAD;AAAtC,KAAX;AACA,QAAMC,WAAW,GAAGnB,IAAI,CAACoB,KAAL,CAAWJ,EAAX,EAAe;AAAEK,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,IAAI,EAAE;AAA1B,KAAf,CAApB;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACL,WAAD,CAAT,EAAwB;AAAEG,MAAAA,IAAI,EAAEf;AAAR,KAAxB,CAAb;AACAR,IAAAA,SAAS,CAAC0B,MAAV,CAAiBF,IAAjB,EAAuBlB,QAAQ,GAAGG,aAAlC;AACH,GAPD;;AASA,SACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAE,iBAACkB,CAAD;AAAA,aAAOhB,WAAW,CAACN,OAAD,EAAUC,QAAV,CAAlB;AAAA,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,mCAAb;AAAiD,IAAA,KAAK,EAAE;AAAEsB,MAAAA,QAAQ,EAAE;AAAZ,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OACwF;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADxF,CADJ;AAIH,CArBM,C,CAsBP;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC5B,SAAOC,MAAM,CAACD,MAAD,CAAN,CAAeE,MAAf,CAAsB,YAAtB,CAAP;AACH,CAFD,C,CAIA;;;AACA,IAAMtB,UAAU,GAAG,SAAbA,UAAa,CAACL,OAAD;AAAA,SACfA,OAAO,CAAC4B,GAAR,CAAY,UAACC,MAAD,EAAY;AACpB,QAAMV,IAAI,GAAG,EAAb;AAEA,QAAIU,MAAM,CAACC,WAAX,EACIX,IAAI,CAAC,SAAD,CAAJ,GAAkBU,MAAM,CAACC,WAAzB;AACAX,IAAAA,IAAI,CAAC,EAAD,CAAJ;AACJrB,IAAAA,OAAO,CAACiC,OAAR,CAAgB,iBAA0B;AAAA,UAAvBC,KAAuB,SAAvBA,KAAuB;AAAA,UAAhBC,SAAgB,SAAhBA,SAAgB;AACtCd,MAAAA,IAAI,CAACa,KAAD,CAAJ,GAAcH,MAAM,CAACI,SAAD,CAApB;AACH,KAFD;AAGA,WAAOd,IAAP;AACH,GAVD,CADe;AAAA,CAAnB,C,CAcA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { Button } from 'react-bootstrap';\nimport columns from './SprintData';\n\nexport const ExportExcel = ({ csvData, fileName, propColumns }) => {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    if (propColumns)\n        columns = propColumns\n\n    csvData = formatJson(csvData)\n    const exportToCSV = (csvData, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(csvData);\n        console.log('ws', ws)\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    }\n\n    return (\n        <Button variant=\"success\" onClick={(e) => exportToCSV(csvData, fileName)}>\n            <i className=\"feather icon-external-link  mx-0 \" style={{ fontSize: \"25px \" }}></i> <span className=\"font-weight-bold\">Excel</span></Button>\n    )\n}\n///convert data/////\nconst convertDate = (mydata) => {\n    return moment(mydata).format(\"DD/MM/YYYY\")\n}\n\n// Conversion of raw json data to excel kpi file like data format\nconst formatJson = (csvData) => (\n    csvData.map((sprint) => {\n        const data = {}\n        \n        if (sprint.projectName)\n            data['Plateau'] = sprint.projectName\n            data['']\n        columns.forEach(({ title, dataIndex }) => {\n            data[title] = sprint[dataIndex]\n        })\n        return data\n    })\n)\n\n// {\n//     title: 'Plateau',\n//     dataIndex: 'projectName',\n// },"]},"metadata":{},"sourceType":"module"}