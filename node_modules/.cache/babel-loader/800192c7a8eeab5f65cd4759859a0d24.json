{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\a851272\\\\OneDrive - Atos\\\\Bureau\\\\KPI-Jira-Front-End-master\\\\src\\\\App\\\\components\\\\Board.js\";\nimport React, { Component } from 'react';\nimport { Row, DropdownButton, Button, Col, ButtonGroup } from 'react-bootstrap';\nimport Axios from 'axios';\nimport config from '../../constants/config';\nimport { tokenConfig } from '../utilitity';\nimport Sprints from './Sprints';\nimport { Select } from 'antd';\nimport { ExportExcel } from './ExportExcel';\nimport ReactToPrint from \"react-to-print\";\nexport var Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.fetchBoards = function () {\n      Axios.get(config.apiBaseUrl + \"/boards/project/\" + _this.props.projectId, tokenConfig()).then(function (res) {\n        _this.setState({\n          boards: res.data\n        });\n      }).catch(function (err) {\n        console.error('err', err);\n      });\n    };\n\n    _this.onChooseBoard = function (key) {\n      _this.setState({\n        selectedBoard: key\n      });\n    };\n\n    _this.dataSourceFromSprintsTable = function (dataSource) {\n      console.log(dataSource);\n\n      _this.setState({\n        dataSource: dataSource\n      });\n    };\n\n    _this.state = {//boards : undefined,\n      //sprints : undefined,\n      // selectedBoard\n    };\n    return _this;\n  }\n  /* convertDate = (mydata) => {\n     return moment(mydata).format(\"DD/MM/YYYY\")\n  }\n  */\n\n\n  _createClass(Board, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchBoards();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var boards = this.state.boards;\n\n      if (boards) {\n        var MOST_RECENT_BOARD = boards.length - 1;\n        return React.createElement(React.Fragment, null, React.createElement(Row, {\n          className: \"mb-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(ShowDropDown, {\n          boards: boards,\n          mostRecentBoard: MOST_RECENT_BOARD,\n          chooseBoard: this.onChooseBoard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        })), this.state.dataSource ? React.createElement(React.Fragment, null, React.createElement(Col, {\n          className: \"text-right mr-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(ButtonGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(ExportExcel, {\n          csvData: this.state.dataSource,\n          fileName: this.props.projectName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), React.createElement(ReactToPrint, {\n          trigger: function trigger() {\n            return React.createElement(Button, {\n              variant: \"danger\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 64\n              },\n              __self: this\n            }, \"  \", React.createElement(\"i\", {\n              className: \"feather icon-file-text  mx-0 \",\n              style: {\n                fontSize: \"25px \"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 64\n              },\n              __self: this\n            }), \" \", React.createElement(\"span\", {\n              className: \"font-weight-bold\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 64\n              },\n              __self: this\n            }, \"Pdf\"));\n          },\n          content: function content() {\n            return _this2.componentRef;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        })))) : null), React.createElement(Row, {\n          className: \"justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, boards.length !== 0 ? React.createElement(Sprints, {\n          ref: function ref(el) {\n            return _this2.componentRef = el;\n          },\n          boardId: this.state.selectedBoard ? this.state.selectedBoard : boards[MOST_RECENT_BOARD].id,\n          dataSourceExport: this.dataSourceFromSprintsTable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }) : null));\n      } else return React.createElement(DropdownButton, {\n        title: \"Chargement...\",\n        variant: \"dark\",\n        className: \"ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nvar ShowDropDown = function ShowDropDown(_ref) {\n  var boards = _ref.boards,\n      chooseBoard = _ref.chooseBoard,\n      mostRecentBoard = _ref.mostRecentBoard;\n  if (boards.length === 1) return React.createElement(Button, {\n    variant: \"outline-dark\",\n    className: \"ml-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"  \", boards[0].name, \" scrum\");else if (boards.length === 0) return React.createElement(Button, {\n    variant: \"outline-danger\",\n    className: \"ml-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"  Tableaux Introuvable ou Inexistants\");else return (// <DropdownButton\n    //     title={\"Selectionner un Tableau\"}\n    //     variant={\"dark\"}\n    //     className=\"ml-2\"\n    // >\n    React.createElement(Select, {\n      size: \"large\",\n      style: {\n        width: 300\n      },\n      defaultValue: boards[mostRecentBoard].id,\n      onChange: chooseBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, boards.map(function (board) {\n      return (// <Dropdown.Item eventKey={board.id} key={board.id} id={board.id} onClick={(e) => chooseBoard(e)}>\n        //     {board.name} scrum\n        // </Dropdown.Item>\n        React.createElement(Select.Option, {\n          key: board.id,\n          value: board.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, board.name, \" scrum\")\n      );\n    })) //</DropdownButton>\n\n  );\n};\n\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\a851272\\OneDrive - Atos\\Bureau\\KPI-Jira-Front-End-master\\src\\App\\components\\Board.js"],"names":["React","Component","Row","DropdownButton","Button","Col","ButtonGroup","Axios","config","tokenConfig","Sprints","Select","ExportExcel","ReactToPrint","Board","props","fetchBoards","get","apiBaseUrl","projectId","then","res","setState","boards","data","catch","err","console","error","onChooseBoard","key","selectedBoard","dataSourceFromSprintsTable","dataSource","log","state","MOST_RECENT_BOARD","length","projectName","fontSize","componentRef","el","id","ShowDropDown","chooseBoard","mostRecentBoard","name","width","map","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Row, DropdownButton, Button, Col, ButtonGroup } from 'react-bootstrap';\nimport Axios from 'axios';\nimport config from '../../constants/config';\nimport { tokenConfig } from '../utilitity';\nimport Sprints from './Sprints';\nimport { Select } from 'antd';\nimport { ExportExcel } from './ExportExcel';\nimport ReactToPrint from \"react-to-print\";\n\nexport class Board extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            //boards : undefined,\n            //sprints : undefined,\n            // selectedBoard\n        }\n    }\n     /* convertDate = (mydata) => {\n        return moment(mydata).format(\"DD/MM/YYYY\")\n    }\n */\n    fetchBoards = () => {\n        Axios\n            .get(config.apiBaseUrl + \"/boards/project/\" + this.props.projectId, tokenConfig())\n            .then(res => {\n                this.setState({ boards: res.data })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n    }\n    componentDidMount() {\n        this.fetchBoards()\n    }\n\n    onChooseBoard = (key) => {\n        this.setState({ selectedBoard: key })\n    }\n\n    dataSourceFromSprintsTable = (dataSource) => {\n        console.log(dataSource);\n        this.setState({ dataSource })\n\n    }\n    render() {\n        const boards = this.state.boards\n\n        if (boards) {\n            const MOST_RECENT_BOARD = boards.length - 1\n            return (\n                <>\n                    <Row className=\"mb-2\">\n                        <Col>\n                            <ShowDropDown boards={boards} mostRecentBoard={MOST_RECENT_BOARD} chooseBoard={this.onChooseBoard} />\n                        </Col>\n                        {this.state.dataSource ?\n                            <>\n                                <Col className=\"text-right mr-2\">\n                                    <ButtonGroup >\n                                        <ExportExcel csvData={this.state.dataSource} fileName={this.props.projectName} />\n                                        <ReactToPrint\n                                            trigger={() => <Button variant=\"danger\">  <i className=\"feather icon-file-text  mx-0 \" style={{ fontSize: \"25px \" }}></i> <span className=\"font-weight-bold\">Pdf</span></Button>}\n                                            content={() => this.componentRef}\n                                        />\n                                    </ButtonGroup>\n                                </Col>\n\n                            </>\n                            : null\n                        }\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        {\n                            boards.length !== 0 ?\n                                <Sprints ref={el => (this.componentRef = el)} boardId={this.state.selectedBoard ? this.state.selectedBoard : boards[MOST_RECENT_BOARD].id} dataSourceExport={this.dataSourceFromSprintsTable} />\n                                : null\n                        }\n                    </Row>\n                </>\n\n            )\n        }\n        else\n            return <DropdownButton\n                title={\"Chargement...\"}\n                variant={\"dark\"}\n                className=\"ml-2\"\n            />\n\n\n    }\n}\n\nconst ShowDropDown = ({ boards, chooseBoard, mostRecentBoard }) => {\n    if (boards.length === 1)\n        return <Button variant={\"outline-dark\"} className=\"ml-2\">  {boards[0].name} scrum</Button>\n    else if (boards.length === 0)\n        return <Button variant={\"outline-danger\"} className=\"ml-2\">  Tableaux Introuvable ou Inexistants</Button>\n    else\n        return (\n            // <DropdownButton\n            //     title={\"Selectionner un Tableau\"}\n            //     variant={\"dark\"}\n            //     className=\"ml-2\"\n            // >\n            <Select size={\"large\"} style={{ width: 300 }} defaultValue={boards[mostRecentBoard].id} onChange={chooseBoard}>\n                {\n                    boards.map(board =>\n                        // <Dropdown.Item eventKey={board.id} key={board.id} id={board.id} onClick={(e) => chooseBoard(e)}>\n                        //     {board.name} scrum\n                        // </Dropdown.Item>\n                        <Select.Option key={board.id} value={board.id} >{board.name} scrum</Select.Option>\n                    )\n                }\n            </Select>\n            //</DropdownButton>\n        )\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}