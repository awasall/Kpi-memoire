{"ast":null,"code":"import axios from \"axios\"; // import { authErrorMess, createMessage } from \"./messages\";\n\nimport * as actionTypes from \"../actions\";\nimport config from \"../../constants/config\";\nimport { tokenConfig } from \"../../App/utilitity\";\nimport { authErrorMess, createMessage, errorMess } from \"./messages\";\nimport { resetNavigation } from \"../../menu-items\";\nimport { getCategories } from \"./projectActions\"; // CONST \n\nvar HOUR_IN_MILLISECOND = 3600 * 1000; //Auth SUCCESS \n\nvar authSuccess = function authSuccess(res) {\n  return {\n    type: actionTypes.LOGIN_SUCCESS,\n    payload: res.data\n  };\n}; // CHECK \n\n\nexport var checkAuthTimeout = function checkAuthTimeout(expirationTime) {\n  // TIME IN SECOND\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime * 1000); //CONVERTING TO MILLISECOND\n  };\n}; // For checking state if timeout is'nt reached \n//and the token in localstorage is correct by getting corresponding user\n\nexport var authCheckState = function authCheckState() {\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n\n    if (token) {\n      var expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        // TIME IS OUT\n        dispatch(logout());\n      } else {\n        // UPDATE TIMEOUT INFO\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n        dispatch(loadUser());\n      }\n    } else {\n      dispatch(logout());\n    }\n  };\n}; // LOGIN USER\n\nexport var login = function login(username, password, stayConnected) {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.LOGIN_START\n    }); // Headers\n\n    var headers = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var body = {\n      username: username,\n      password: password\n    };\n    axios.post(config.apiBaseUrl + \"/api/auth/signin\", body, headers).then(function (res) {\n      if (stayConnected) {\n        var expirationDate = new Date(new Date().getTime() + HOUR_IN_MILLISECOND * 24); // ONE DAY\n\n        localStorage.setItem('expirationDate', expirationDate);\n        dispatch(checkAuthTimeout(3600 * 24));\n      } else {\n        var _expirationDate = new Date(new Date().getTime() + HOUR_IN_MILLISECOND * 3); // ONE 3 HOURS\n\n\n        localStorage.setItem('expirationDate', _expirationDate);\n        dispatch(checkAuthTimeout(3 * 3600));\n      }\n\n      dispatch(loadUser(res.data.accessToken));\n      dispatch(authSuccess(res));\n    }).catch(function (err) {\n      console.log('login error', err);\n      dispatch(errorMess({\n        message: 'username ou mot de passe incorrect'\n      }));\n      dispatch({\n        type: actionTypes.LOGIN_FAIL\n      }); //dispatch(authErrorMess(err.response.data, err.response.status));\n    });\n  };\n}; // CHECK TOKEN & LOAD USER\n//Auth Loaded\n\nvar userLoaded = function userLoaded(res) {\n  return {\n    type: actionTypes.USER_LOADED,\n    payload: res.data\n  };\n}; // GETTING user and CATEGORIES (categories will setup navigation sidebar items)\n\n\nexport var loadUser = function loadUser() {\n  var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n  return function (dispatch, getState) {\n    // User Loading\n    dispatch({\n      type: actionTypes.USER_LOADING_START\n    });\n    axios.get(\"\".concat(config.apiBaseUrl, \"/api/user/current\"), tokenConfig(token)).then(function (res) {\n      dispatch(userLoaded(res)); // GETTING CATEGORIES\n\n      dispatch(getCategories());\n    }).catch(function (err) {\n      dispatch(authErrorMess(err));\n      dispatch({\n        type: actionTypes.USER_LOADING_FAIL\n      });\n      dispatch(logout());\n    });\n  };\n}; // LOGOUT USER\n\nexport var logout = function logout() {\n  return function (dispatch, getState) {\n    //Reset navigation bar\n    resetNavigation(); //Reset token and expiration date\n\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('expirationDate'); // REDIRECT TO LOGIN PAGE\n\n    dispatch({\n      type: actionTypes.LOGOUT_SUCCESS\n    });\n  };\n}; // SIGN UP USER\n\nvar registerSucces = function registerSucces(res) {\n  console.log('register payload', res);\n  return {\n    type: actionTypes.REGISTER_SUCCESS,\n    payload: res.data\n  };\n}; //\n\n\nexport var register = function register(_ref) {\n  var username = _ref.username,\n      password = _ref.password,\n      email = _ref.email;\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.REGISTER_START\n    });\n    axios.post(config.apiBaseUrl + \"/api/auth/signup\", {\n      username: username,\n      password: password,\n      name: email\n    }, tokenConfig()).then(function (res) {\n      dispatch(registerSucces(res));\n      dispatch(createMessage(\"Utilisateur créé avec succès\"));\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: actionTypes.REGISTER_FAIL\n      }); //dispatch(authErrorMess(err));\n\n      dispatch(errorMess({\n        message: 'Utilisateur déjà existant ou mot de passe trop court(<6) '\n      }));\n    });\n  };\n}; // CHANGE PASSWORD\n\nexport var changePassword = function changePassword(passwordData) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actionTypes.PASSWORD_CHANGE_START\n    });\n    axios.post(\"\".concat(config.apiBaseUrl, \"/api/auth/updatePassword?password=\").concat(passwordData.newPassword1, \"&oldpassword=\").concat(passwordData.oldPassword), null, tokenConfig()).then(function (res) {\n      dispatch(createMessage(\"Mot de passe changé avec Success\"));\n      dispatch({\n        type: actionTypes.PASSWORD_CHANGE_SUCCESS\n      });\n    }).catch(function (err) {\n      console.log('err.data', err.data);\n      console.log('err.dataded', err);\n      console.log('err.dataded', err.message);\n      dispatch(authErrorMess(err));\n      dispatch({\n        type: actionTypes.PASSWORD_CHANGE_FAILED\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\a851272\\OneDrive - Atos\\Bureau\\KPI-Jira-Front-End-master\\src\\store\\actions\\authentication.js"],"names":["axios","actionTypes","config","tokenConfig","authErrorMess","createMessage","errorMess","resetNavigation","getCategories","HOUR_IN_MILLISECOND","authSuccess","res","type","LOGIN_SUCCESS","payload","data","checkAuthTimeout","expirationTime","dispatch","setTimeout","logout","authCheckState","token","localStorage","getItem","expirationDate","Date","getTime","loadUser","login","username","password","stayConnected","LOGIN_START","headers","body","post","apiBaseUrl","then","setItem","accessToken","catch","err","console","log","message","LOGIN_FAIL","userLoaded","USER_LOADED","undefined","getState","USER_LOADING_START","get","USER_LOADING_FAIL","removeItem","LOGOUT_SUCCESS","registerSucces","REGISTER_SUCCESS","register","email","REGISTER_START","name","REGISTER_FAIL","changePassword","passwordData","PASSWORD_CHANGE_START","newPassword1","oldPassword","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILED"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n// import { authErrorMess, createMessage } from \"./messages\";\n\nimport * as actionTypes from \"../actions\";\nimport config from \"../../constants/config\";\nimport { tokenConfig } from \"../../App/utilitity\";\nimport { authErrorMess, createMessage, errorMess } from \"./messages\";\nimport { resetNavigation } from \"../../menu-items\";\nimport { getCategories } from \"./projectActions\";\n\n\n// CONST \nconst HOUR_IN_MILLISECOND = (3600 * 1000)\n\n//Auth SUCCESS \nconst authSuccess = res => {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        payload: res.data\n    }\n}\n\n// CHECK \nexport const checkAuthTimeout = expirationTime => {// TIME IN SECOND\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000) //CONVERTING TO MILLISECOND\n    }\n}\n// For checking state if timeout is'nt reached \n//and the token in localstorage is correct by getting corresponding user\nexport const authCheckState = () => (dispatch) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            // TIME IS OUT\n            dispatch(logout());\n        } else {\n            // UPDATE TIMEOUT INFO\n            dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n            dispatch(loadUser());\n        }\n    } else {\n        dispatch(logout());\n    }\n};\n\n// LOGIN USER\nexport const login = (username, password, stayConnected) => dispatch => {\n    dispatch({ type: actionTypes.LOGIN_START });\n    // Headers\n    const headers = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    };\n\n    let body = {\n        username,\n        password\n    }\n    axios\n        .post(config.apiBaseUrl + \"/api/auth/signin\", body, headers)\n        .then(res => {\n            if (stayConnected) {\n                const expirationDate = new Date(new Date().getTime() + HOUR_IN_MILLISECOND * 24); // ONE DAY\n                localStorage.setItem('expirationDate', expirationDate);\n                dispatch(checkAuthTimeout(3600 * 24));\n            } else {\n                const expirationDate = new Date(new Date().getTime() + HOUR_IN_MILLISECOND * 3); // ONE 3 HOURS\n                localStorage.setItem('expirationDate', expirationDate);\n                dispatch(checkAuthTimeout(3 * 3600));\n            }\n            dispatch(loadUser(res.data.accessToken))\n            dispatch(authSuccess(res))\n        })\n        .catch(err => {\n            console.log('login error', err)\n            dispatch(errorMess({ message: 'username ou mot de passe incorrect' }));\n            dispatch({\n                type: actionTypes.LOGIN_FAIL\n            });\n            //dispatch(authErrorMess(err.response.data, err.response.status));\n        });\n};\n\n// CHECK TOKEN & LOAD USER\n//Auth Loaded\nconst userLoaded = res => ({\n    type: actionTypes.USER_LOADED,\n    payload: res.data\n})\n// GETTING user and CATEGORIES (categories will setup navigation sidebar items)\nexport const loadUser = (token = undefined) => (dispatch, getState) => {\n    // User Loading\n    dispatch({ type: actionTypes.USER_LOADING_START })\n    axios\n        .get(`${config.apiBaseUrl}/api/user/current`, tokenConfig(token))\n        .then(res => {\n            dispatch(userLoaded(res));\n            // GETTING CATEGORIES\n            dispatch(getCategories())\n        })\n        .catch(err => {\n            dispatch(authErrorMess(err));\n            dispatch({ type: actionTypes.USER_LOADING_FAIL });\n            dispatch(logout());\n        });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n    //Reset navigation bar\n    resetNavigation()\n    //Reset token and expiration date\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('expirationDate');\n    // REDIRECT TO LOGIN PAGE\n    dispatch({\n        type: actionTypes.LOGOUT_SUCCESS\n    });\n};\n\n// SIGN UP USER\nconst registerSucces = res => {\n    console.log('register payload', res)\n    return {\n        type: actionTypes.REGISTER_SUCCESS,\n        payload: res.data\n    }\n}\n\n//\nexport const register = ({ username, password, email }) => dispatch => {\n    dispatch({ type: actionTypes.REGISTER_START })\n\n    axios\n        .post(config.apiBaseUrl + \"/api/auth/signup\", { username, password, name: email }, tokenConfig())\n        .then(res => {\n            dispatch(registerSucces(res));\n            dispatch(createMessage(\"Utilisateur créé avec succès\"))\n        })\n        .catch(err => {\n            console.log(err)\n            dispatch({\n                type: actionTypes.REGISTER_FAIL\n            });\n            //dispatch(authErrorMess(err));\n            dispatch(errorMess({ message: 'Utilisateur déjà existant ou mot de passe trop court(<6) ' }));\n        });\n}\n\n\n// CHANGE PASSWORD\nexport const changePassword = (passwordData) => (dispatch, getState) => {\n    dispatch({\n        type: actionTypes.PASSWORD_CHANGE_START\n    })\n    axios\n        .post(`${config.apiBaseUrl}/api/auth/updatePassword?password=${passwordData.newPassword1}&oldpassword=${passwordData.oldPassword}`, null, tokenConfig())\n        .then(res => {\n            dispatch(createMessage(\"Mot de passe changé avec Success\"))\n            dispatch({\n                type: actionTypes.PASSWORD_CHANGE_SUCCESS\n            })\n        })\n        .catch(err => {\n            console.log('err.data', err.data)\n            console.log('err.dataded', err)\n            console.log('err.dataded', err.message)\n            dispatch(authErrorMess(err));\n            dispatch({\n                type: actionTypes.PASSWORD_CHANGE_FAILED\n            });\n        });\n};"]},"metadata":{},"sourceType":"module"}